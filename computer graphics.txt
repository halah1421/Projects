#define _CRT_SECURE_NO_DEPRECATE 
#define _USE_MATH_DEFINES
#include <cmath>
#include <windows.h>
#include <GL\glew.h>  // A cross-platform open-source C/C++ extension loading library
#include <stdlib.h>
#include <GL\freeglut.h>   // handle the window-managing operations
#include <iostream>
#include <GL\glut.h>

using namespace std;



using namespace std;

char imagePath[] = "/Users/ralsh/Documents/CS39_6/CG_Lec/8k_earth_daymap.bmp";

//Makes the image into a texture, and returns the id of the texture

GLuint LoadTexture(const char* filename, int width, int height)
{
    GLuint texture;
    unsigned char* data;
    FILE* file;

    //The following code will read in our RAW file
    file = fopen(filename, "rb");

    if (file == NULL)
    {
        cout << "Unable to open the image file" << endl << "Program will exit :(" << endl;
        exit(0);
        return 0;
    }

    data = (unsigned char*)malloc(width * height * 3);
    fread(data, width * height * 3, 1, file);

    fclose(file);


    // reorder the image colors to RGB not BGR
    for (int i = 0; i < width * height; ++i)
    {
        int index = i * 3;
        unsigned char B, R;
        B = data[index];
        R = data[index + 2];

        data[index] = R;
        data[index + 2] = B;

    }
    glGenTextures(1, &texture);            //generate the texture with the loaded data
    glBindTexture(GL_TEXTURE_2D, texture); //bind the texture to it's array

    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE/*GL_REPLACE*/); //set texture environment parameters

    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
    /////////////////////////////////////////

    free(data); //free the texture array

    if (glGetError() != GL_NO_ERROR)
        printf("GLError in genTexture()\n");

    return texture; //return whether it was successfull  
}


GLuint textureId; //The id of the texture

GLUquadric* quad;

float rotateY;


void init() {
    glEnable(GL_DEPTH_TEST);
    textureId = LoadTexture(imagePath, 8192, 4096);

    if (textureId == -1)
    {
        cout << "Error in loading the texture" << endl;
    }
    else
        cout << "The texture value is: " << textureId << endl;

    quad = gluNewQuadric();

    //glDisable(GL_DEPTH_TEST);

}

void handleResize(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(30.0, (float)w / (float)h, 1.0, 200.0);
}


void drawSphere() {

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    glTranslatef(0.0f, 1.0f, -16.0f);
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, textureId);
    //Bottom

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

    //glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

    //glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    glRotatef(90, 1.0f, 0.0f, 0.0f);
    glRotatef(rotateY, 0.0f, 0.0f, 1.0f);
    gluQuadricTexture(quad, 1);
    gluSphere(quad, 2, 20, 20);

    glutSwapBuffers();

}

void play(int value) {
    rotateY += 2.0f;
    if (rotateY > 360.f) {
        rotateY -= 360;
    }
    glutPostRedisplay();
    glutTimerFunc(25, play, 0);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Textures-codeincodeblock.blogspot.com");
    init();
    glutTimerFunc(25, play, 0);
    glutDisplayFunc(drawSphere);
    sndPlaySound(TEXT("SpaceSounds.wav"), SND_ASYNC | SND_LOOP); //Background sound
    glutReshapeFunc(handleResize);
    glutMainLoop();
    return 0;
}
